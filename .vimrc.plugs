
" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

call plug#begin('~/.vim/plugged')

" Plugs {
    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_plug_groups')
"        let g:spf13_plug_groups=['general', 'ctags', 'youcompleteme', 'programming', 'python', 'misc',]
        let g:spf13_plug_groups=['general', 'ctags', 'programming', 'python', 'misc', 'coc-nvim']
    endif

    " To override all the included plugs, add the following to your
    " .vimrc.plugs.local file:
    "   let g:override_spf13_plugs = 1
    if !exists("g:override_spf13_plugs")

    " General {
        Plug 'scrooloose/nerdtree'
        " new nerdtree
        " give  defx nice icons
        "Plug 'kristijanhusak/defx-icons'
        "Plug 'Shougo/defx.nvim'
        " needed for defx
        "Plug 'roxma/nvim-yarp'
        "Plug 'roxma/vim-hug-neovim-rpc'

        Plug 'jistr/vim-nerdtree-tabs'
        Plug 'justinmk/vim-dirvish'
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-repeat'
        Plug 'myusuf3/numbers.vim'
        Plug 'rhysd/conflict-marker.vim'
        Plug 'jiangmiao/auto-pairs'
        Plug 'tpope/vim-unimpaired'
        Plug 'yggdroot/leaderf'
        Plug 'terryma/vim-multiple-cursors'
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        Plug 'bling/vim-bufferline'
        Plug 'easymotion/vim-easymotion'
        Plug 'mbbill/undotree'
        Plug 'nathanaelkane/vim-indent-guides'
        Plug 'mhinz/vim-signify'
        Plug 'kana/vim-textobj-user'
        Plug 'kana/vim-textobj-indent'
        Plug 'gcmt/wildfire.vim'
        " tagbar likely plugin with LSP
        Plug 'liuchengxu/vista.vim'
        " auto switch to paste mode
        Plug 'ConradIrwin/vim-bracketed-paste'
        " a start page
        Plug 'mhinz/vim-startify'
        " auto switch root dictory
"        Plug 'airblade/vim-rooter'
    " }

    " General Programming {
        " Pick one of the checksyntax, jslint, or syntastic
        Plug 'kana/vim-textobj-function'
        Plug 'mattn/gist-vim'
        Plug 'scrooloose/nerdcommenter'
        Plug 'tpope/vim-commentary'
        Plug 'godlygeek/tabular'
        Plug 'luochen1990/rainbow'
        Plug 'vim-scripts/DoxygenToolkit.vim'
"        Plug 'w0rp/ale'
    " }

    " ctags & gtags {
        if count(g:spf13_plug_groups, 'ctags')
            Plug 'vim-scripts/autoload_cscope.vim'
        elseif count(g:spf13_plug_groups, 'gtags')
            Plug 'ludovicchabant/vim-gutentags'
            Plug 'skywind3000/gutentags_plus'
            Plug 'skywind3000/vim-preview'
        endif
    "}

    " Snippets & AutoComplete {
        if count(g:spf13_plug_groups, 'youcompleteme')
            Plug 'Valloric/YouCompleteMe'
            Plug 'SirVer/ultisnips'
        endif
        if count(g:spf13_plug_groups, 'coc-nvim')
            Plug 'neoclide/coc.nvim', {'branch': 'release'}
            let g:coc_global_extensions = [
            \    'coc-json',
            \    'coc-git',
            \    'coc-highlight',
            \    'coc-python',
            \    'coc-sh',
            \    'coc-snippets',
            \    'coc-vimlsp',
            \    'coc-yaml',
            \    'coc-yank',
            \    'coc-clangd',
            \    'coc-lists',
            \    'coc-explorer',
            \]
        endif
        Plug 'honza/vim-snippets'
        Plug 'shougo/echodoc'
    " }

    " Misc {
        Plug 'rust-lang/rust.vim'
        Plug 'tpope/vim-cucumber'
        Plug 'cespare/vim-toml'
        Plug 'quentindecock/vim-cucumber-align-pipes'
        Plug 'saltstack/salt-vim'
        Plug 'sheerun/vim-polyglot'
    " }
    " colors & themes {
        Plug 'altercation/vim-colors-solarized'
        Plug 'morhetz/gruvbox'
        Plug 'franbach/miramare'
        Plug 'sainnhe/sonokai'
        Plug 'ap/vim-css-color'
        Plug 'dracula/vim', { 'as': 'dracula' }
    " }
    " others {
        Plug 'vim/killersheep'
    " }

    endif
" }

call plug#end()
